{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\reactjs\\\\portfolio\\\\src\\\\ToggleSwitch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToggleSwitch = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    // Check if user has a preference saved in local storage\n    const storedMode = localStorage.getItem('theme');\n    if (storedMode) {\n      setIsDarkMode(storedMode === 'dark');\n    } else {\n      // Alternatively, you can check the user's system preferences and set the initial theme accordingly\n      const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setIsDarkMode(prefersDarkMode);\n    }\n  }, []);\n  const handleToggle = () => {\n    const updatedMode = !isDarkMode;\n    setIsDarkMode(updatedMode);\n\n    // Update the theme in local storage\n    localStorage.setItem('theme', updatedMode ? 'dark' : 'light');\n\n    // Apply the updated theme to the app\n    applyTheme(updatedMode);\n  };\n  const applyTheme = darkMode => {\n    const root = document.documentElement;\n    if (darkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      checked: isDarkMode,\n      onChange: handleToggle,\n      labelLeft: \"Light\",\n      labelRight: \"Dark\",\n      rounded: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n};\n_s(ToggleSwitch, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = ToggleSwitch;\nexport default ToggleSwitch;\nvar _c;\n$RefreshReg$(_c, \"ToggleSwitch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ToggleSwitch","_s","isDarkMode","setIsDarkMode","storedMode","localStorage","getItem","prefersDarkMode","window","matchMedia","matches","handleToggle","updatedMode","setItem","applyTheme","darkMode","root","document","documentElement","classList","add","remove","children","Switch","checked","onChange","labelLeft","labelRight","rounded","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/reactjs/portfolio/src/ToggleSwitch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nconst ToggleSwitch = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      // Check if user has a preference saved in local storage\r\n      const storedMode = localStorage.getItem('theme');\r\n      if (storedMode) {\r\n        setIsDarkMode(storedMode === 'dark');\r\n      } else {\r\n        // Alternatively, you can check the user's system preferences and set the initial theme accordingly\r\n        const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n        setIsDarkMode(prefersDarkMode);\r\n      }\r\n    }, []);\r\n  \r\n    const handleToggle = () => {\r\n      const updatedMode = !isDarkMode;\r\n      setIsDarkMode(updatedMode);\r\n  \r\n      // Update the theme in local storage\r\n      localStorage.setItem('theme', updatedMode ? 'dark' : 'light');\r\n  \r\n      // Apply the updated theme to the app\r\n      applyTheme(updatedMode);\r\n    };\r\n  \r\n    const applyTheme = (darkMode) => {\r\n      const root = document.documentElement;\r\n      if (darkMode) {\r\n        root.classList.add('dark');\r\n      } else {\r\n        root.classList.remove('dark');\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Switch\r\n          checked={isDarkMode}\r\n          onChange={handleToggle}\r\n          labelLeft=\"Light\"\r\n          labelRight=\"Dark\"\r\n          rounded={true}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n  export default ToggleSwitch;\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdD,aAAa,CAACC,UAAU,KAAK,MAAM,CAAC;IACtC,CAAC,MAAM;MACL;MACA,MAAMG,eAAe,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MACjFP,aAAa,CAACI,eAAe,CAAC;IAChC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,WAAW,GAAG,CAACV,UAAU;IAC/BC,aAAa,CAACS,WAAW,CAAC;;IAE1B;IACAP,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAED,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC;;IAE7D;IACAE,UAAU,CAACF,WAAW,CAAC;EACzB,CAAC;EAED,MAAME,UAAU,GAAIC,QAAQ,IAAK;IAC/B,MAAMC,IAAI,GAAGC,QAAQ,CAACC,eAAe;IACrC,IAAIH,QAAQ,EAAE;MACZC,IAAI,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAC5B,CAAC,MAAM;MACLJ,IAAI,CAACG,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IAC/B;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,eACEvB,OAAA,CAACwB,MAAM;MACLC,OAAO,EAAEtB,UAAW;MACpBuB,QAAQ,EAAEd,YAAa;MACvBe,SAAS,EAAC,OAAO;MACjBC,UAAU,EAAC,MAAM;MACjBC,OAAO,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA9CED,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAiDhB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}